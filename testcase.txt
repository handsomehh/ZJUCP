filename: /opt/bin/testcases/lv9/00_local_arr_1d.c
int main() {
  int a[10];
  const int len = 10;
  int b[8 + 2], c, d[len];
  return 0;
}
filename: /opt/bin/testcases/lv9/01_local_arr_nd.c
int main() {
  int a[5][6];
  int b[5][6], c, d[5][6];
  return 1;
}
filename: /opt/bin/testcases/lv9/02_global_arr.c
int a[10];
const int len = 10;
int b[8 + 2], c, d[len];
int e[5][6];
int f[5][6], g, h[5][6];

int main() {
  return 2;
}
filename: /opt/bin/testcases/lv9/03_arr_init_1d.c
int main() {
  int a[3] = {};
  int b[4] = {0, 1};
  int c[7] = {2, 8, 6, 3, 9, 1, 5};
  int d[11];
  int e[2] = {22, 33}, f[6], g[9] = {85, 0, 1, 29};
  return 3;
}
filename: /opt/bin/testcases/lv9/04_arr_init_nd.c
int main() {
  int a[5][3];
  int b[5][3] = {};
  int c[5][3] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
  int d[5][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {10, 11, 12}, {13, 14, 15}},
      e[5][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, 10, 11, 12, 13, 14, 15};
  int f[5], g[5][3] = {1, 2, 3, {4}, {7}, 10, 11, 12}, h[3];
  int i[2][3][4] = {1, 2, 3, 4, {5}, {}};
  return 4;
}
filename: /opt/bin/testcases/lv9/05_global_arr_init.c
int a0[3] = {};
int b0[4] = {0, 1};
int c0[7] = {2, 8, 6, 3, 9, 1, 5};
int d0[11];
int e0[2] = {22, 33}, f0[6], g0[9] = {85, 0, 1, 29};

int a[5][3];
int b[5][3] = {};
int c[5][3] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
int d[5][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {10, 11, 12}, {13, 14, 15}},
    e[5][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, 10, 11, 12, 13, 14, 15};
int f[5], g[5][3] = {1, 2, 3, {4}, {7}, 10, 11, 12}, h[3];
int i[2][3][4] = {1, 2, 3, 4, {5}, {}};

int main() {
  return 5;
}
filename: /opt/bin/testcases/lv9/06_long_array.c
int arr[65536];

int main() {
  int arr[4096] = {1};
  return arr[0];
}
filename: /opt/bin/testcases/lv9/07_const_array.c
int main() {
  const int a0[3] = {};
  const int b0[4] = {0, 1};
  const int c0[7] = {2, 8, 6, 3, 9, 1, 5};
  const int e0[2] = {22, 33}, g0[9] = {85, 0, 1, 29};

  const int b[5][3] = {};
  const int c[5][3] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
  const int d[5][3] = {{1, 2, 3},
                       {4, 5, 6},
                       {7, 8, 9},
                       {10, 11, 12},
                       {13, 14, 15}},
            e[5][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, 10, 11, 12, 13, 14, 15};
  const int g[5][3] = {1, 2, 3, {4}, {7}, 10, 11, 12};
  const int i[2][3][4] = {1, 2, 3, 4, {5}, {}};
  return 0;
}
filename: /opt/bin/testcases/lv9/08_arr_access.c
int ga[10], gb[2][3] = {5, 6, 7, 8};

int main() {
  int a[10], b[2][3] = {1, 2, 3, 4}, sum = 0;
  int i = 0;
  while (i < 2) {
    int j = 0;
    while (j < 3) {
      sum = sum + b[i][j] + gb[i][j];
      j = j + 1;
    }
    i = i + 1;
  }
  i = 0;
  while (i < 10) {
    a[i] = sum + i;
    ga[i] = sum + i;
    i = i + 1;
  }
  return sum;
}
filename: /opt/bin/testcases/lv9/09_const_arr_read.c
const int garr[10] = {6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

int main() {
  const int arr[10] = {1, 2, 3, 4, 5};
  int i = 0, sum = 0;
  while (i < 10) {
    sum = sum + arr[i] + garr[i];
    i = i + 1;
  }
  return sum;
}
filename: /opt/bin/testcases/lv9/10_arr_in_loop.c
int main() {
  int arr[10] = {1, 2, 3, 4, 5};
  int i = 0;
  while (i < 10) {
    int x[10] = {};
    arr[i] = arr[i] + i + x[i];
    x[i] = arr[i];
    i = i + 1;
  }
  return arr[9];
}
filename: /opt/bin/testcases/lv9/11_arr_params.c
void f1d(int arr[]) {
  int i = 0;
  while (i < 10) {
    arr[i] = i;
    i = i + 1;
  }
}

void f2d(int arr[][8 + 2]) {
  arr[1][2] = 3;
  int i = 0;
  while (i < 10) {
    f1d(arr[i]);
    i = i + 1;
  }
}

int main() {
  return 33;
}
filename: /opt/bin/testcases/lv9/12_more_arr_params.c
void init(int arr[][10][10]) {
  int i = 0;
  while (i < 10) {
    int j = 0;
    while (j < 10) {
      int k = 0;
      while (k < 10) {
        arr[i][j][k] = i * 100 + j * 10 + k;
        k = k + 1;
      }
      j = j + 1;
    }
    i = i + 1;
  }
}

int f1(int a0[], int a1[], int a2[], int a3[], int a4[], int a5[], int a6[],
       int a7[], int a8[], int a9[]) {
  return a0[0] + a1[1] + a2[2] + a3[3] + a4[4] + a5[5] + a6[6] + a7[7] + a8[8] +
         a9[9];
}

int f2(int a0[][10], int a1[], int a2, int a3[], int a4[], int a5[][10][10],
       int a6[], int a7[], int a8, int a9[][10]) {
  return a0[0][9] + a1[1] + a2 + a3[3] + a4[4] + a5[5][5][5] + a6[6] + a7[7] +
         a8 + a9[9][8];
}

int main() {
  int arr[10][10][10], sum = 0;
  init(arr);
  sum = sum + f1(arr[0][0], arr[1][1], arr[2][2], arr[3][3], arr[4][4],
                 arr[5][5], arr[6][6], arr[7][7], arr[8][8], arr[9][9]);
  sum = sum + f2(arr[0], arr[1][1], arr[2][2][2], arr[3][3], arr[4][4], arr,
                 arr[6][6], arr[7][7], arr[8][8][8], arr[9]);
  putint(sum);
  putch(10);
  return 0;
}
filename: /opt/bin/testcases/lv9/13_complex_arr_params.c
int init = 0;

void init1d(int n, int arr[]) {
  int i = 0;
  while (i < n) {
    arr[i] = init;
    init = init + 1;
    i = i + 1;
  }
}

void init2d(int n, int arr[][10]) {
  int i = 0;
  while (i < n) {
    init1d(10, arr[i]);
    i = i + 1;
  }
}

void init3d(int n, int arr[][10][10]) {
  int i = 0;
  while (i < n) {
    init2d(10, arr[i]);
    i = i + 1;
  }
}

int sum1d(int n, int arr[]) {
  int i = 0, sum = 0;
  while (i < n) {
    sum = sum + arr[i];
    i = i + 1;
  }
  return sum;
}

int sum2d(int n, int arr[][10]) {
  int i = 0, sum = 0;
  while (i < n) {
    sum = sum + sum1d(10, arr[i]);
    i = i + 1;
  }
  return sum;
}

int sum3d(int n, int arr[][10][10]) {
  int i = 0, sum = 0;
  while (i < n) {
    sum = sum + sum2d(10, arr[i]);
    i = i + 1;
  }
  return sum;
}

int main() {
  int arr[10][10][10];
  init3d(10, arr);
  int sum = sum3d(10, arr);
  sum = sum + sum2d(10, arr[1]);
  sum = sum + sum1d(10, arr[2][3]);
  putint(sum);
  putch(10);
  return sum;
}
filename: /opt/bin/testcases/lv9/14_arr_lib_funcs.c
int main() {
  int arr[10], n = getarray(arr);
  int i = 0;
  while (i < 10) {
    if (i < n) {
      arr[i] = arr[i] + i;
    } else {
      arr[i] = arr[i - 1] + i;
    }
    i = i + 1;
  }
  putarray(n, arr);
  return 0;
}
filename: /opt/bin/testcases/lv9/15_sort1.c
int n;
int bubblesort(int arr[])
{
    int i;
    int j;
    i =0; 
    while(i < n-1){
    // Last i elements are already in place
        j = 0;
        while(j < n-i-1){
            if (arr[j] > arr[j+1]) {
                // swap(&arr[j], &arr[j+1]); 
                int tmp;
                tmp = arr[j+1];
                arr[j+1] = arr[j];
                arr[j] = tmp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return 0;
}

int main(){
    n = 10;
    int a[10];
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    int i;
    i = bubblesort(a);
    while (i < n) {
        int tmp;
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    return 0;
}
filename: /opt/bin/testcases/lv9/16_sort2.c
int n;
int insertsort(int a[])
{
    int i;
    i = 1;
    while(i<n)     
    {
        int temp;
        temp=a[i]; 
        int j;
        j=i-1;
        while(j>-1&&temp<a[j])
        {
            a[j+1]=a[j];  
            j = j - 1;
        }
        a[j+1]=temp; 
        i = i + 1;
    }
    return 0;
}

int main(){
    n = 10;
    int a[10];
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    int i;
    i = insertsort(a);
    while (i < n) {
        int tmp;
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    return 0;
}
filename: /opt/bin/testcases/lv9/17_sort3.c
int n;
int QuickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int i;
        i = low;
        int j;
        j = high;
        int k;
        k = arr[low];
        while (i < j)
        {
            while(i < j && arr[j] > k - 1)
            {
                j = j - 1;
            }
 
            if(i < j)
            {
                arr[i] = arr[j];
                i = i + 1;
            }
 
            while(i < j && arr[i] < k)
            {
                i = i + 1;
            }
 
            if(i < j)
            {
                arr[j] = arr[i];
                j = j - 1;
            }
        }
 
        arr[i] = k;
        int tmp;
        tmp = i - 1;
        tmp = QuickSort(arr, low, tmp);
        tmp = i + 1;
        tmp = QuickSort(arr, tmp, high);
    }
    return 0;
}

int main(){
    n = 10;
    int a[10];
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    int i;
    i = 0;
    int tmp;
    tmp = 9;
    i = QuickSort(a, i, tmp);
    while (i < n) {
        int tmp;
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    return 0;
}
filename: /opt/bin/testcases/lv9/18_sort4.c
int n;
int select_sort(int A[],int n)
{
    int i;
    int j;
    int min;
    i =0;
    while(i < n-1)
    {
        min=i;//
        j = i + 1;
        while(j < n)
        {
            if(A[min]>A[j])
            {
                min=j;
            }
            j=j+1;
        }
        if(min!=i)
        {
            int tmp;
            tmp = A[min];
            A[min] = A[i];
            A[i] = tmp;
        }
        i = i + 1;
    }
    return 0;
}

int main(){
    n = 10;
    int a[10];
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    int i;
    i = 0;
    i = select_sort(a, n);
    while (i < n) {
        int tmp;
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    return 0;
}
filename: /opt/bin/testcases/lv9/19_sort5.c
int n;
int swap (int array[], int i, int j){
    int temp;
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
    return 0;  
}
int heap_ajust(int arr[], int start, int end) {  
    int dad;
    dad = start;  
    int son;
    son = dad * 2 + 1;  
    while (son < end + 1) { //   
        if (son < end && arr[son] < arr[son + 1])
            son = son + 1;  
        if (arr[dad] > arr[son])
            return 0;  
        else {
            dad = swap(arr,dad,son);  
            dad = son;  
            son = dad * 2 + 1;  
        }  
    }  
    return 0;  
}  
int heap_sort(int arr[], int len) {  
    int i;  
    int tmp;
    i = len / 2 - 1;
    while ( i > -1) {
        tmp = len - 1;
        tmp = heap_ajust(arr, i, tmp);  
        i = i - 1;
    }    
    i = len - 1;   
    while ( i > 0) {  
        int tmp0;
        tmp0 = 0;
        tmp = swap(arr,tmp0,i);
        tmp = i - 1;
        tmp = heap_ajust(arr, tmp0, tmp);  
        i = i-1;
    }  
    return 0;
}  

int main(){
    n = 10;
    int a[10];
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    int i;
    i = 0;
    i = heap_sort(a, n);
    while (i < n) {
        int tmp;
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    return 0;
}
filename: /opt/bin/testcases/lv9/20_sort6.c
int n;

int counting_sort(int ini_arr[], int sorted_arr[], int n) {
	int count_arr[10];
	int i;
    int j;
    int k;
    k = 0;
    i = 0;
    j = 0;
	while(k < 10){
		count_arr[k] = 0;
        k = k + 1;
    }
    while(i < n)
    {
		count_arr[ini_arr[i]] = count_arr[ini_arr[i]] + 1;
        i = i + 1;
    }
    k = 1;
	while(k < 10){
		count_arr[k] = count_arr[k] + count_arr[k - 1];
        k = k + 1;
    }
    j = n;
	while( j > 0){
        count_arr[ini_arr[j - 1]] = count_arr[ini_arr[j - 1]] - 1;
		sorted_arr[count_arr[ini_arr[j - 1]]] = ini_arr[j - 1];
        j = j - 1;
    }
    return 0;
}


int main(){
    n = 10;
    int a[10];
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    int i;
    i = 0;
    int b[10];
    i = counting_sort(a, b, n);
    while (i < n) {
        int tmp;
        tmp = b[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    return 0;
}
filename: /opt/bin/testcases/lv9/21_sort7.c
int buf[2][100];

// sort [l, r)
void merge_sort(int l, int r)
{
    if (l + 1 >= r)
        return;

    int mid = (l + r) / 2;
    merge_sort(l, mid);
    merge_sort(mid, r);

    int i = l, j = mid, k = l;
    while (i < mid && j < r) {
        if (buf[0][i] < buf[0][j]) {
            buf[1][k] = buf[0][i];
            i = i + 1;
        } else {
            buf[1][k] = buf[0][j];
            j = j + 1;
        }
        k = k + 1;
    }
    while (i < mid) {
        buf[1][k] = buf[0][i];
        i = i + 1;
        k = k + 1;
    }
    while (j < r) {
        buf[1][k] = buf[0][j];
        j = j + 1;
        k = k + 1;
    }

    while (l < r) {
        buf[0][l] = buf[1][l];
        l = l + 1;
    }
}

int main()
{
    int n = getarray(buf[0]);
    merge_sort(0, n);
    putarray(n, buf[0]);
    return 0;
}
